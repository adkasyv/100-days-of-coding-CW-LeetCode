---1

You are given two sorted arrays that both only contain integers. Your task is to find a way to merge them into a single one, sorted in asc order. Complete the function mergeArrays(arr1, arr2), where arr1 and arr2 are the original sorted arrays.

You don't need to worry about validation, since arr1 and arr2 must be arrays with 0 or more Integers. If both arr1 and arr2 are empty, then just return an empty array.

Note: arr1 and arr2 may be sorted in different orders. Also arr1 and arr2 may have same integers. Remove duplicated in the returned result.
Examples (input -> output)

* [1, 2, 3, 4, 5], [6, 7, 8, 9, 10] -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

solution
function mergeArrays(arr1, arr2) {

  if(arr1.length === 0 && arr2.length === 0) {
    return [];
  } else {
    const arr = new Set([...arr1, ...arr2]);
    const arrSorted = [...arr].sort((a,b ) => a - b)
    return arrSorted;
  }

  
}

mergeArrays([1,3,5,7,9], [10,8,6,4,2])
outupt -> Array(10) [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]


---2
Вход: массив элементов
["ч", "о", "л", "а"]
Вывод: Строка с разделенными запятыми элементами массива в том же порядке.
"ч, о, л, а" 

solution:
function printArray(array){
  return array.join(',');
}

printArray(["h","o","l","a"])




---3
8 kyu
Welcome to the City

Description:

Create a method that takes as input a name, city, and state to welcome a person. Note that name will be an array consisting of one or more values that should be joined together with one space between each, and the length of the name array in test cases will vary.

Example:

['John', 'Smith'], 'Phoenix', 'Arizona'

This example will return the string Hello, John Smith! Welcome to Phoenix, Arizona!


solution: 
function sayHello( name, city, state ) {
  const fullName = name.flat().join(' ');
  console.log(fullName)
  return `Hello, ${fullName}! Welcome to ${city}, ${state}!`
}
sayHello(['John', 'Smith'], 'Phoenix', 'Arizona')





---4
8 kyu
Remove duplicates from list

Define a function that removes duplicates from an array of non negative numbers and returns it as a result.

The order of the sequence has to stay the same.

Examples:

Input -> Output
[1, 1, 2] -> [1, 2]
[1, 2, 1, 1, 3, 2] -> [1, 2, 3]

solution

function distinct(a) {
  return uniq = [...new Set(a)];

}

distinct([1,1,1,2,2])




---5
8 kyu
Remove String Spaces

Write a function that removes the spaces from the string, then return the resultant string.

Examples:

Input -> Output
"8 j 8   mBliB8g  imjB8B8  jl  B" -> "8j8mBliB8gimjB8B8jlB"
"8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB fd" -> "88Bifk8hB8BB8BBBB888chl8BhBfd"
"8aaaaa dddd r     " -> "8aaaaaddddr"


solution
function noSpace(x){
  return x.split(' ').join('');
}


















