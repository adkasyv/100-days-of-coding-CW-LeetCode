8 kyu
Grasshopper - Summation


Summation

Write a program that finds the summation of every number from 1 to num. The number will always be a positive integer greater than 0.

For example (Input -> Output):

2 -> 3 (1 + 2)
8 -> 36 (1 + 2 + 3 + 4 + 5 + 6 + 7 + 8)

solution
  function summation(num) {
  let sum = 0;
  
  for(let i = 0; i <= num; i++) {
    sum += i;
  }
  return sum
}

summation(8)


------2
8 kyu
Opposites Attract
Timmy & Sarah think they are in love, but around where they live, they will only know once they pick a flower each. If one of the flowers has an even number of petals and the other has an odd number of petals it means they are in love.

Write a function that will take the number of petals of each flower and return true if they are in love and false if they aren't.

----solution
function lovefunc(flower1, flower2){
  if(flower1 % 2 != 0 && flower2 % 2 == 0) {
    return true 
  } else if(flower1 % 2 == 0 && flower2 % 2 != 0) {
    return true
  } else {
    return false
  }
}

lovefunc(0,1)





-------3
7 kyu
Beginner Series #3 Sum of Numbers

Given two integers a and b, which can be positive or negative, find the sum of all the integers between and including them and return it. If the two numbers are equal return a or b.

Note: a and b are not ordered!
Examples (a, b) --> output (explanation)

(1, 0) --> 1 (1 + 0 = 1)
(1, 2) --> 3 (1 + 2 = 3)
(0, 1) --> 1 (0 + 1 = 1)
(1, 1) --> 1 (1 since both are same)
(-1, 0) --> -1 (-1 + 0 = -1)
(-1, 2) --> 2 (-1 + 0 + 1 + 2 = 2)

Your function should only return a number, not the explanation about how you get that number.

solution---

function getSum(a, b) {
	if(a === b ) return a;
  const minNum = Math.min(a, b);
	const maxNum = Math.max(a, b);
  
  let sum = 0;
  for(let i = minNum; i <= maxNum; i++) {
    sum += i;
  }
  return sum
}

getSum(-1,2)qqq
