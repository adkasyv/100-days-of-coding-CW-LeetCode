6 kyu
Sort the odd

Task
You will be given an array of numbers. You have to sort the odd numbers in ascending order while leaving the even numbers at their original positions.
Examples

[7, 1]  =>  [1, 7]
[5, 8, 6, 3, 4]  =>  [3, 8, 6, 5, 4]

solution
function sortArray(arr) {
  const oddNums = arr.filter((num) => num % 2 !== 0).sort((a,b) => a - b);

	let oddIndex = 0;
  const resultArr = arr.map((num) => {
    if(num % 2 !== 0) {
      return oddNums[oddIndex++]
    }
    return num
  })
  
  return resultArr
}

sortArray([5, 8, 6, 3, 4] )



2------
2620. Counter
Easy
724
44
Companies

Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).


Example 1:

Input: 
n = 10 
["call","call","call"]
Output: [10,11,12]
Explanation: 
counter() = 10 // The first time counter() is called, it returns n.
counter() = 11 // Returns 1 more than the previous time.
counter() = 12 // Returns 1 more than the previous time.


solution---
var createCounter = function(n) {
  return function(start) {
    n = ++start || n;
    return n++;
  }
};




----3
2665. Counter II
Easy
467
9
Companies

Write a function createCounter. It should accept an initial integer init. It should return an object with three functions.

The three functions are:

    increment() increases the current value by 1 and then returns it.
    decrement() reduces the current value by 1 and then returns it.
    reset() sets the current value to init and then returns it.

 

Example 1:

Input: init = 5, calls = ["increment","reset","decrement"]
Output: [6,5,4]
Explanation:
const counter = createCounter(5);
counter.increment(); // 6
counter.reset(); // 5
counter.decrement(); // 4



-----solution
var createCounter = function(init) {
	const counter = {
    value: init,
    increment() {
      this.value++;
      return this.value;
    },
    decrement() {
			this.value--;
      return this.value;
    },
    reset() {
      this.value = init
      return this.value;
    }
  } 
  return counter
};
const counter = createCounter(5)
counter.increment(); // 6
counter.reset(); // 5
counter.decrement(); // 4





